#######################
#####
#####  CAPTER 9
#####
#######################
import cv2 as cv
import numpy as np
import sys


if __name__ == '__main__':
    # 读取图像
    image = cv.imread('./images/lena.jpg')
    if image is None:
        print('Failed to read lena.jpg.')
        sys.exit()

    # 转为灰度图像
    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)

    # 生成关键点
    kps = []
    key_points = np.random.randint(0, 512, 200).reshape((100, 2))
    # print(key_points)
    # exit()
    for point in key_points:
        kps.append(cv.KeyPoint(float(point[0]), float(point[1]), 1))#这里程序中代码错误，有对于cv.KeyPoint()，前两个参数需要用float类型。

    # 绘制关键点
    image_result = cv.drawKeypoints(image, kps, None, (), cv.DRAW_MATCHES_FLAGS_DEFAULT)
    gray_result = cv.drawKeypoints(gray, kps, None, (), cv.DRAW_MATCHES_FLAGS_DEFAULT)

    # 展示结果
    cv.imshow('Color Result', image_result)
    cv.imshow('Gray Result', gray_result)
    cv.waitKey(0)
    cv.destroyAllWindows()
#################这里的角点检测实在看不出是什么，因为这些角点都是随机生成的，根本不是关键点。
import cv2 as cv
import numpy as np
import sys

if __name__ == '__main__':
    # 读取图像
    image = cv.imread('./images/lena.jpg')
    if image is None:
        print('Failed to read lena.jpg.')
        sys.exit()

    # 转为灰度图像
    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)

    # 计算Harris系数
    harris = cv.cornerHarris(gray, 2, 3, 0.04, borderType=cv.BORDER_DEFAULT)

    # 对Harris进行归一化便于进行数值比较
    harris_nor = cv.normalize(harris, None, alpha=0, beta=255, norm_type=cv.NORM_MINMAX)
    harris_nor = harris_nor.astype('uint8')

    # 寻找Harris角点
    kps = []
    for i in np.argwhere(harris_nor > 125):#与125阈值相互比较，大于就保存下来。125这个值的选择，我认为与255的最大值关系较大。其实也可以该换成别的阈值。
        kps.append(cv.KeyPoint(float(i[1]), float(i[0]), 1))#则合理的cv.KeyPoint()里面是float属性。

    # 绘制角点
    result = cv.drawKeypoints(image, kps, None)

    # 展示结果
    cv.imshow('R', harris_nor)
    cv.imshow('Harris KeyPoints', result)
    cv.waitKey(0)
    cv.destroyAllWindows()
#出Hams角点主要集中在图像人物的头发和帽子区域，因为这两个区域中线段的交点较多。
########################################################################
