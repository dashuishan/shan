#这里讲的是and or是怎么用的。
如果a, b是逻辑变量， 则两类的用法基本一致

In[103]:(3>0) | (3<1)
Out[103]: True
In[104]:(3>0) and (3<1)# 注意这里是有（）的
Out[104]: False
In[105]:(3>0) or (3<1)
Out[105]: True
In[106]:(3>0) & (3<1)
Out[106]: False
————————————————
如果a，b是数值变量， 则&， |表示位运算， and，or则依据是否非0来决定输出，
&， |怎么用：
# 1&2，2在二进制里面是10,1在二进制中是01，那么01与运算10得到是0 
1 & 2         # 输出为 0， 
1 | 2         # 输出为3

#自写程序 shan
age=30
if age<2:
    print("he is infant")
elif (age>2) & (age<13):
    print("he is a child")
elif (age>13) & (age<20):
    print("he is a kid")
elif (age>20) & (age<65):
    print("he is a man")
elif age>65:
    print("he is old man")
 
 #在Python中：False、0、''、[]、{}、()都视为假，因此可以直接进行逻辑运算。此方法效率最高，但可读性较差，无法准确预知原先的数据类型具体是什么，只是非常模糊地知道可能是False、0、''、[]、{}、()这6种类型中的一种。
 usernames = []
if usernames:
    for username in usernames:
        if username=='admin':
            print("hello admin ,i love you")
        else:
            print(f"hello ,{username},you are not welcome xiaolaji")
else:
    print("你是个空的，")

#这个案例教你怎么去掉大小写识别。
# current_users = ['eric', 'willie', 'admin', 'erin', 'Ever']
# new_users = ['sarah', 'Willie', 'PHIL', 'ever', 'Iona']
# current_users_lower=
# for new_user in new_users:
#     if new_user.lower()in current_users.lower():#这样书写是错误的，原因是current_users是个列表，不能直接调用lower()方法。
#         print("有重名，清更换")
#     else:
#         print("谢谢，注册成功")
current_users = ['eric', 'willie', 'admin', 'erin', 'Ever']
new_users = ['sarah', 'Willie', 'PHIL', 'ever', 'Iona']

current_users_lower=[current_user.lower() for current_user in current_users]
for new_user in new_users:
    if new_user.lower() in current_users_lower:
        print("有重名，清更换")
    else:
        print("谢谢，注册成功")
#注意这里使用了列表的生成的方法，###################################
python3的列表生成式主要有3种：
for循环+if ------- [i for i in xxx if x xxx]
for循环+if else --------- [i if exp1 else exp2 for i in xxx]
多层for循环 ----------- [for i in xxx for j in xxx]
# 列表生成式1  for循环+if
# [i for i in xxx if x xxx]
# 此处的if语句主要起判断的作用,if在后
a = [i for i in [1,2,3,4] if i > 2]
print(a)
result [3,4]
# 列表生成式2   for循环+if else
# [i if exp1 else exp2 for i in xxx]
# 此处的if else语句主要起赋值的作用,if---else----在前
a = [i if i>2 else 0 for i in [1,2,3,4,5]]
print(a)
result [0,0,3,4,5]
# 列表生成式3  多层for循环
# [for i in xxx for j in xxx]
a = [i+j for i in 'abc' for j in 'mnp']
print(a)
result ['am','an','ap','bm','bn','bp','cm','cn','cp']
########################################################
for i in range(1,10):
    if i==1:
        print("1st")
    elif i==2:
        print("2nd")
    elif i==3:
        print("3rd")
    else:
        print(f"{i}th")
    ##########################################################
    
    person={'first_name':'jiang','last_name':'shan','age':28,'city':'yichun'}
print(person['first_name'])
print(person['last_name'])
print(person['age'])
print(person['city'])
###################################################################
favirite_number={
    'andy':1,
    'shan':2,
    'xing':3,
    'fang':4,
    'huang':5
}
print(f"andy has the favirite number is {favirite_number['andy']}")
###########################################################################
glossary = {
 'string': 'A series of characters.',
 'comment': 'A note in a program that the Python interpreter ignores.',
 'list': 'A collection of items in a particular order.',
 'loop': 'Work through a collection of items, one at a time.',
 'dictionary': "A collection of key-value pairs.",
 }
for keyword in glossary:

    word=keyword
    print(f"{word.title()} means {glossary[word]}, thank you")#我在想字典中怎么写循环呢？我尝试下，结果成功了。
    
   
