#这里讲的是and or是怎么用的。
如果a, b是逻辑变量， 则两类的用法基本一致

In[103]:(3>0) | (3<1)
Out[103]: True
In[104]:(3>0) and (3<1)# 注意这里是有（）的
Out[104]: False
In[105]:(3>0) or (3<1)
Out[105]: True
In[106]:(3>0) & (3<1)
Out[106]: False
————————————————
如果a，b是数值变量， 则&， |表示位运算， and，or则依据是否非0来决定输出，
&， |怎么用：
# 1&2，2在二进制里面是10,1在二进制中是01，那么01与运算10得到是0 
1 & 2         # 输出为 0， 
1 | 2         # 输出为3

#自写程序 shan
age=30
if age<2:
    print("he is infant")
elif (age>2) & (age<13):
    print("he is a child")
elif (age>13) & (age<20):
    print("he is a kid")
elif (age>20) & (age<65):
    print("he is a man")
elif age>65:
    print("he is old man")
 
 #在Python中：False、0、''、[]、{}、()都视为假，因此可以直接进行逻辑运算。此方法效率最高，但可读性较差，无法准确预知原先的数据类型具体是什么，只是非常模糊地知道可能是False、0、''、[]、{}、()这6种类型中的一种。
 usernames = []
if usernames:
    for username in usernames:
        if username=='admin':
            print("hello admin ,i love you")
        else:
            print(f"hello ,{username},you are not welcome xiaolaji")
else:
    print("你是个空的，")

#这个案例教你怎么去掉大小写识别。
current_users = ['eric', 'willie', 'admin', 'erin', 'Ever']
new_users = ['sarah', 'Willie', 'PHIL', 'ever', 'Iona']
current_users_lower=
for new_user in new_users:
    if new_user.lower()in current_users.lower():
        print("有重名，清更换")
    else:
        print("谢谢，注册成功")
