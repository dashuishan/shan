#这里讲的是and or是怎么用的。
如果a, b是逻辑变量， 则两类的用法基本一致

In[103]:(3>0) | (3<1)
Out[103]: True
In[104]:(3>0) and (3<1)# 注意这里是有（）的
Out[104]: False
In[105]:(3>0) or (3<1)
Out[105]: True
In[106]:(3>0) & (3<1)
Out[106]: False
————————————————
如果a，b是数值变量， 则&， |表示位运算， and，or则依据是否非0来决定输出，
&， |怎么用：
# 1&2，2在二进制里面是10,1在二进制中是01，那么01与运算10得到是0 
1 & 2         # 输出为 0， 
1 | 2         # 输出为3

#自写程序 shan
age=30
if age<2:
    print("he is infant")
elif (age>2) & (age<13):
    print("he is a child")
elif (age>13) & (age<20):
    print("he is a kid")
elif (age>20) & (age<65):
    print("he is a man")
elif age>65:
    print("he is old man")
 
 #在Python中：False、0、''、[]、{}、()都视为假，因此可以直接进行逻辑运算。此方法效率最高，但可读性较差，无法准确预知原先的数据类型具体是什么，只是非常模糊地知道可能是False、0、''、[]、{}、()这6种类型中的一种。
 usernames = []
if usernames:
    for username in usernames:
        if username=='admin':
            print("hello admin ,i love you")
        else:
            print(f"hello ,{username},you are not welcome xiaolaji")
else:
    print("你是个空的，")

#这个案例教你怎么去掉大小写识别。
# current_users = ['eric', 'willie', 'admin', 'erin', 'Ever']
# new_users = ['sarah', 'Willie', 'PHIL', 'ever', 'Iona']
# current_users_lower=
# for new_user in new_users:
#     if new_user.lower()in current_users.lower():#这样书写是错误的，原因是current_users是个列表，不能直接调用lower()方法。
#         print("有重名，清更换")
#     else:
#         print("谢谢，注册成功")
current_users = ['eric', 'willie', 'admin', 'erin', 'Ever']
new_users = ['sarah', 'Willie', 'PHIL', 'ever', 'Iona']

current_users_lower=[current_user.lower() for current_user in current_users]
for new_user in new_users:
    if new_user.lower() in current_users_lower:
        print("有重名，清更换")
    else:
        print("谢谢，注册成功")
#注意这里使用了列表的生成的方法，###################################
python3的列表生成式主要有3种：
for循环+if ------- [i for i in xxx if x xxx]
for循环+if else --------- [i if exp1 else exp2 for i in xxx]
多层for循环 ----------- [for i in xxx for j in xxx]
# 列表生成式1  for循环+if
# [i for i in xxx if x xxx]
# 此处的if语句主要起判断的作用,if在后
a = [i for i in [1,2,3,4] if i > 2]
print(a)
result [3,4]
# 列表生成式2   for循环+if else
# [i if exp1 else exp2 for i in xxx]
# 此处的if else语句主要起赋值的作用,if---else----在前
a = [i if i>2 else 0 for i in [1,2,3,4,5]]
print(a)
result [0,0,3,4,5]
# 列表生成式3  多层for循环
# [for i in xxx for j in xxx]
a = [i+j for i in 'abc' for j in 'mnp']
print(a)
result ['am','an','ap','bm','bn','bp','cm','cn','cp']
########################################################
for i in range(1,10):
    if i==1:
        print("1st")
    elif i==2:
        print("2nd")
    elif i==3:
        print("3rd")
    else:
        print(f"{i}th")
    ##########################################################
    
    person={'first_name':'jiang','last_name':'shan','age':28,'city':'yichun'}
print(person['first_name'])
print(person['last_name'])
print(person['age'])
print(person['city'])
###################################################################
favirite_number={
    'andy':1,
    'shan':2,
    'xing':3,
    'fang':4,
    'huang':5
}
print(f"andy has the favirite number is {favirite_number['andy']}")
###########################################################################
glossary = {
 'string': 'A series of characters.',
 'comment': 'A note in a program that the Python interpreter ignores.',
 'list': 'A collection of items in a particular order.',
 'loop': 'Work through a collection of items, one at a time.',
 'dictionary': "A collection of key-value pairs.",
 }
for keyword in glossary:

    word=keyword
    print(f"{word.title()} means {glossary[word]}, thank you")#我在想字典中怎么写循环呢？我尝试下，结果成功了。
      #######################################################################################
    glossary = {
 'string': 'A series of characters.',
 'comment': 'A note in a program that the Python interpreter ignores.',
 'list': 'A collection of items in a particular order.',
 'loop': 'Work through a collection of items, one at a time.',
 'dictionary': "A collection of key-value pairs.",
 'key': 'The first item in a key-value pair in a dictionary.',
 'value': 'An item associated with a key in a dictionary.',
 'conditional test': 'A comparison between two values.',
 'float': 'A numerical value with a decimal component.',
 'boolean expression': 'An expression that evaluates to True or False.',
 }
for key,means in glossary.items():##这里终于学会了字典的循环调用了，好开心。item（）是个宝，家家离不了。
    print(f"\n{key}:{means}")
##################################################################################################20230527
    rivers = {
 'nile': 'egypt',
 'mississippi': 'united states',
 'fraser': 'canada',
'kuskokwim': 'alaska',
 'yangtze': 'china',
 }
for river,country in rivers.items():
    print(f"-the {river.title()}  run though the {country} ")
    print(f"-{river.title()}")
    print(f"-{country.title()}")
  ######################################################################################################
favorite_languages = {
 'jen': 'python',
 'sarah': 'c',
 'edward': 'ruby',
 'phil': 'python',
 }
for name,language in favorite_languages.items():
    print(f"{name.title()}  favorite language is {language.title()} ")
coders = ['phil', 'josh', 'david', 'becca', 'sarah', 'matt', 'danielle']
for code in coders:
    if code in favorite_languages.keys():#注意这里的keys()，指的是字典里面的KEY值。
        print(f"{code},thank you")
    else:
        print(f"{code},麻烦填写，谢谢！")
        ####################################################################################################
        people=[]
person1 = {
 'first_name': 'eric',
 'last_name': 'matthes',
 'age': 43,
 'city': 'sitka',
 }
people.append(person1)
person2 = {
 'first_name': 'jiang',
 'last_name': 'shan',
 'age': 23,
 'city': 'yichun',
 }
people.append(person2)
person3 = {
 'first_name': 'bing',
 'last_name': 'gan',
 'age': 13,
 'city': 'binzhou',
 }
people.append(person3)
for person in people:
    print(f"{person['first_name']}{person['last_name']} age is {person['age']} and live in {person['city']}")
###############################################################################看这里字典是怎么合成列表的，列表是输出每个内容的。
pet = {
 'animal type': 'python',
 'name': 'john',
 'owner': 'guido',
 'weight': 43,
 'eats': 'bugs',
}
pets.append(pet)
pet = {
 'animal type': 'chicken',
 'name': 'clarence',
 'owner': 'tiffany',
 'weight': 2,
 'eats': 'seeds',
}
pets.append(pet)
pet = {
 'animal type': 'dog',
 'name': 'peso',
 'owner': 'eric',
 'weight': 37,
 'eats': 'shoes',
}
pets.append(pet)

for pet in pets:
    print(f"let us know about {pet['name']}")
    for key,information in pet.items():
        print(f"{key}:{information}")
        ###############################################################
favorite_places = {
 'eric': ['bear mountain', 'death valley', 'tierra del fuego'],
 'erin': ['hawaii', 'iceland'],
 'willie': ['mt. verstovia', 'the playground', 'new hampshire']
 }
for name,favorite_place in favorite_places.items():#我在想是不是只有字典的键值是一个的时候，才会使用这个item（）呢？
    print(f"{name.title()} favorite places is :")
    for place in favorite_place:
        print(f"- {place.title()}.")##这个案例是字典中 一个key对应 多个数值的问题，这些数值是用列表的形式表现出来的。
     ##################################################################
cities = {
 'santiago': {
 'country': 'chile',
 'population': 6_310_000,
 'nearby mountains': 'andes',
 },
 'talkeetna': {
 'country': 'united states',
 'population': 876,
 'nearby mountains': 'alaska range',
 },
 'kathmandu': {
 'country': 'nepal',
 'population': 975_453,
 'nearby mountains': 'himilaya',
 }
 }
for city,informations in cities.items():
    print(f" the city {city.title() :}")
    for key,information in informations.items():
        print(f"{key}：{information}")
###############################################################这里是字典中嵌套字典的方式，我也使用了，两个for 循环的方式，跟答案使用字典的key[]方法有所不同
message = input("Tell me something, and I will repeat it back to you: ")
print(message.title())
##############################################################################
party_size=input("how many peopel are in your dinner party tonight?")
party_size=int(party_size)

if party_size>8:
    print("没有空位")
else:
    print("有空位，请进来。")
#######################################################################
num=input("Give me a number,please:")
num=int(num)

if num%10==0:#%表示取模运算符。
    print(f"{num}是10的倍数")
else:
    print(f"{num}不是10的倍数")
####################################################################
prompt="\n what topping would you like on your pizza?,enter 'quit' when you are finished."
#prompt+="\n enter 'quit' when you are finished."

while True:
    topping=input(prompt)
    if topping!='quit':
        print(f"we will add {topping} in your pizza")
    else:
        break#这个是初入门while break的用法，用来中止这段话使用。
     ########################################################################
     prompt=input("how old are you and please enter 'quit' when you are finished.")
while True:
    prompt = int(prompt)
    if prompt!='quit':#这里因为int后 肯定不是等于字符串所以会造成不停的循环。然后就会把电脑给崩溃掉。
        if prompt<=3:
            print("price is free")
        elif (prompt > 3) & (prompt < 12):
            print("the price is 10 dollor")
        elif prompt>12:
            print("the price is 15 dollor")
    else:
        break
  ######      看我这串代码，错误的地方很多，。我这里修改了形参，造成之后的循环输出后，还有的就是我这里的input居然写在了最开始，这样就造成了死循环。因为不需要我输入数字了。真的是错误一堆堆。###########################
  prompt1="how old are you?"
prompt1 +="\n please enter 'quit' when you are finished."
while True:
    prompt =input(prompt1)#千万注意这个input（）函数的位置，让他可以循环显示。
    if prompt=='quit':
        break
    prompt=int(prompt)
    if prompt<=3:
        print("price is free")
    elif (prompt > 3) & (prompt < 12):
        print("the price is 10 dollor")
    elif prompt>12:
        print("the price is 15 dollor")
#####################################################################################################   
sandwich_orders = ['veggie', 'grilled cheese', 'turkey', 'roast beef']
finished_sandwiches = []

while sandwich_orders:

    for sandwich_order in sandwich_orders:
        print(f"i made your tuna {sandwich_order} sandwich")
        sandwich_orders.pop()
        finished_sandwiches.append(sandwich_order)
        print(finished_sandwiches)
###############################################################################################这里我做的和书上不同，但是我们共同说明一个问题POP（）出来的数据是从头开始剥离的。这个程序也是错误的。哈哈 因为根本不是从头开始的，而是从尾巴上剔除的。
sandwich_orders = ['veggie', 'grilled cheese', 'turkey', 'roast beef']
finished_sandwiches = []

while sandwich_orders:

    current_sandwich=sandwich_orders.pop()
    print(f"i made your tuna {current_sandwich} sandwich")
    finished_sandwiches.append(current_sandwich)
    print(finished_sandwiches)
   ###############################################################################################应该使用这个程序
   sandwich_orders = [
 'pastrami', 'veggie', 'grilled cheese', 'pastrami',
 'turkey', 'roast beef', 'pastrami']
finished_sandwiches = []
print("I'm sorry, we're all out of pastrami today.")
for sandwich_order in sandwich_orders:
    if sandwich_order=='pastrami':
        sandwich_orders.remove('pastrami')
print(sandwich_orders)

while sandwich_orders:
    current_sandwich=sandwich_orders.pop()
    print(f"i made your tuna {current_sandwich} sandwich")
    finished_sandwiches.append(current_sandwich)
    print(finished_sandwiches)
    ###############################################################
name_prompt = "\nWhat's your name? "
place_prompt = "If you could visit one place in the world, where would it be? "
continue_prompt = "\nWould you like to let someone else respond? (yes/no) "
#调查结果写在字典中,如{name:place}
respose={}
while True:
    name=input(name_prompt)
    place=input(place_prompt)
    respose[name]=place

    repeat=input(continue_prompt)
    if repeat!='yes':
        break
#显示调查结果
print(respose)
for name,place in respose.items():
    print(f"{name} like to visit {place} in the world")
   ############################################################################这个题目讲了字典是怎么生成的，我还一位是用append，其实字典没这个玩意。然后这种写prompt的套路其实是挺好的。
   
